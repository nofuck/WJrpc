// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WJrpcheader.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_WJrpcheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_WJrpcheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_WJrpcheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_WJrpcheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_WJrpcheader_2eproto;
namespace WJrpc {
class rpcHeader;
class rpcHeaderDefaultTypeInternal;
extern rpcHeaderDefaultTypeInternal _rpcHeader_default_instance_;
}  // namespace WJrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::WJrpc::rpcHeader* Arena::CreateMaybeMessage<::WJrpc::rpcHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WJrpc {

// ===================================================================

class rpcHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WJrpc.rpcHeader) */ {
 public:
  inline rpcHeader() : rpcHeader(nullptr) {};
  virtual ~rpcHeader();

  rpcHeader(const rpcHeader& from);
  rpcHeader(rpcHeader&& from) noexcept
    : rpcHeader() {
    *this = ::std::move(from);
  }

  inline rpcHeader& operator=(const rpcHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline rpcHeader& operator=(rpcHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rpcHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rpcHeader* internal_default_instance() {
    return reinterpret_cast<const rpcHeader*>(
               &_rpcHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(rpcHeader& a, rpcHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(rpcHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rpcHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rpcHeader* New() const final {
    return CreateMaybeMessage<rpcHeader>(nullptr);
  }

  rpcHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rpcHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rpcHeader& from);
  void MergeFrom(const rpcHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rpcHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WJrpc.rpcHeader";
  }
  protected:
  explicit rpcHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_WJrpcheader_2eproto);
    return ::descriptor_table_WJrpcheader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 1,
    kServerMethodFieldNumber = 2,
    kArgsSizeFieldNumber = 3,
  };
  // string server_name = 1;
  void clear_server_name();
  const std::string& server_name() const;
  void set_server_name(const std::string& value);
  void set_server_name(std::string&& value);
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  std::string* mutable_server_name();
  std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_name(
      std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // string server_method = 2;
  void clear_server_method();
  const std::string& server_method() const;
  void set_server_method(const std::string& value);
  void set_server_method(std::string&& value);
  void set_server_method(const char* value);
  void set_server_method(const char* value, size_t size);
  std::string* mutable_server_method();
  std::string* release_server_method();
  void set_allocated_server_method(std::string* server_method);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server_method();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server_method(
      std::string* server_method);
  private:
  const std::string& _internal_server_method() const;
  void _internal_set_server_method(const std::string& value);
  std::string* _internal_mutable_server_method();
  public:

  // uint32 args_size = 3;
  void clear_args_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 args_size() const;
  void set_args_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_args_size() const;
  void _internal_set_args_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:WJrpc.rpcHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_method_;
  ::PROTOBUF_NAMESPACE_ID::uint32 args_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_WJrpcheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// rpcHeader

// string server_name = 1;
inline void rpcHeader::clear_server_name() {
  server_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& rpcHeader::server_name() const {
  // @@protoc_insertion_point(field_get:WJrpc.rpcHeader.server_name)
  return _internal_server_name();
}
inline void rpcHeader::set_server_name(const std::string& value) {
  _internal_set_server_name(value);
  // @@protoc_insertion_point(field_set:WJrpc.rpcHeader.server_name)
}
inline std::string* rpcHeader::mutable_server_name() {
  // @@protoc_insertion_point(field_mutable:WJrpc.rpcHeader.server_name)
  return _internal_mutable_server_name();
}
inline const std::string& rpcHeader::_internal_server_name() const {
  return server_name_.Get();
}
inline void rpcHeader::_internal_set_server_name(const std::string& value) {
  
  server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rpcHeader::set_server_name(std::string&& value) {
  
  server_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WJrpc.rpcHeader.server_name)
}
inline void rpcHeader::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WJrpc.rpcHeader.server_name)
}
inline void rpcHeader::set_server_name(const char* value,
    size_t size) {
  
  server_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WJrpc.rpcHeader.server_name)
}
inline std::string* rpcHeader::_internal_mutable_server_name() {
  
  return server_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rpcHeader::release_server_name() {
  // @@protoc_insertion_point(field_release:WJrpc.rpcHeader.server_name)
  return server_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rpcHeader::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WJrpc.rpcHeader.server_name)
}
inline std::string* rpcHeader::unsafe_arena_release_server_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WJrpc.rpcHeader.server_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rpcHeader::unsafe_arena_set_allocated_server_name(
    std::string* server_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WJrpc.rpcHeader.server_name)
}

// string server_method = 2;
inline void rpcHeader::clear_server_method() {
  server_method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& rpcHeader::server_method() const {
  // @@protoc_insertion_point(field_get:WJrpc.rpcHeader.server_method)
  return _internal_server_method();
}
inline void rpcHeader::set_server_method(const std::string& value) {
  _internal_set_server_method(value);
  // @@protoc_insertion_point(field_set:WJrpc.rpcHeader.server_method)
}
inline std::string* rpcHeader::mutable_server_method() {
  // @@protoc_insertion_point(field_mutable:WJrpc.rpcHeader.server_method)
  return _internal_mutable_server_method();
}
inline const std::string& rpcHeader::_internal_server_method() const {
  return server_method_.Get();
}
inline void rpcHeader::_internal_set_server_method(const std::string& value) {
  
  server_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rpcHeader::set_server_method(std::string&& value) {
  
  server_method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WJrpc.rpcHeader.server_method)
}
inline void rpcHeader::set_server_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WJrpc.rpcHeader.server_method)
}
inline void rpcHeader::set_server_method(const char* value,
    size_t size) {
  
  server_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WJrpc.rpcHeader.server_method)
}
inline std::string* rpcHeader::_internal_mutable_server_method() {
  
  return server_method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rpcHeader::release_server_method() {
  // @@protoc_insertion_point(field_release:WJrpc.rpcHeader.server_method)
  return server_method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rpcHeader::set_allocated_server_method(std::string* server_method) {
  if (server_method != nullptr) {
    
  } else {
    
  }
  server_method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WJrpc.rpcHeader.server_method)
}
inline std::string* rpcHeader::unsafe_arena_release_server_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WJrpc.rpcHeader.server_method)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_method_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rpcHeader::unsafe_arena_set_allocated_server_method(
    std::string* server_method) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server_method != nullptr) {
    
  } else {
    
  }
  server_method_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server_method, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WJrpc.rpcHeader.server_method)
}

// uint32 args_size = 3;
inline void rpcHeader::clear_args_size() {
  args_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rpcHeader::_internal_args_size() const {
  return args_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rpcHeader::args_size() const {
  // @@protoc_insertion_point(field_get:WJrpc.rpcHeader.args_size)
  return _internal_args_size();
}
inline void rpcHeader::_internal_set_args_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  args_size_ = value;
}
inline void rpcHeader::set_args_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_args_size(value);
  // @@protoc_insertion_point(field_set:WJrpc.rpcHeader.args_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace WJrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_WJrpcheader_2eproto
